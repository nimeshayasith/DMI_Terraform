#cloud-config
package_update: true
package_upgrade: true

packages:
  - git
  - curl
  - build-essential
  - mysql-client
  - nginx

runcmd:
  # Install Node.js 18.x
  - curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
  - apt-get install -y nodejs
  
  # Install PM2 globally
  - npm install -g pm2
  
  # Enable Nginx
  - systemctl enable nginx
  
  # Clone EpicBook repository as user
  - sudo -u ${admin_username} git clone ${github_repo_url} /home/${admin_username}/epicbook
  
  # Setup backend
  - cd /home/${admin_username}/epicbook/backend && sudo -u ${admin_username} npm install
  
  # Create backend .env file
  - |
    cat > /home/${admin_username}/epicbook/backend/.env << 'ENVEOF'
    DB_HOST=${db_host}
    DB_USER=${db_username}
    DB_PASSWORD=${db_password}
    DB_NAME=${db_name}
    PORT=3001
    NODE_ENV=production
    ENVEOF
  
  # Fix ownership
  - chown -R ${admin_username}:${admin_username} /home/${admin_username}/epicbook
  
  # Wait for MySQL to be ready (with retry logic)
  - |
    for i in {1..30}; do
      if mysql -h ${db_host} -u ${db_username} -p'${db_password}' -e "SHOW DATABASES;" > /dev/null 2>&1; then
        echo "MySQL is ready!"
        break
      fi
      echo "Waiting for MySQL... attempt $i/30"
      sleep 10
    done
  
  # Initialize database if schema exists
  - |
    if [ -f /home/${admin_username}/epicbook/backend/schema.sql ]; then
      mysql -h ${db_host} -u ${db_username} -p'${db_password}' ${db_name} < /home/${admin_username}/epicbook/backend/schema.sql || true
    fi
  
  # Start backend with PM2 as user
  - cd /home/${admin_username}/epicbook/backend && sudo -u ${admin_username} pm2 start server.js --name epicbook-backend
  - sudo -u ${admin_username} pm2 save
  - env PATH=$PATH:/usr/bin pm2 startup systemd -u ${admin_username} --hp /home/${admin_username}
  
  # Build frontend
  - cd /home/${admin_username}/epicbook/frontend && sudo -u ${admin_username} npm install
  - cd /home/${admin_username}/epicbook/frontend && sudo -u ${admin_username} npm run build
  
  # Configure Nginx
  - |
    cat > /etc/nginx/sites-available/epicbook << 'NGINXEOF'
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        root /home/${admin_username}/epicbook/frontend/build;
        index index.html;
        
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        location /api/ {
            proxy_pass http://localhost:3001;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_cache_bypass $http_upgrade;
        }
    }
    NGINXEOF
  
  # Enable site and restart Nginx
  - ln -sf /etc/nginx/sites-available/epicbook /etc/nginx/sites-enabled/epicbook
  - rm -f /etc/nginx/sites-enabled/default
  - nginx -t && systemctl restart nginx
  
  # Log completion
  - echo "EpicBook deployment completed at $(date)" >> /var/log/cloud-init-epicbook.log

write_files:
  - path: /var/log/cloud-init-epicbook.log
    content: |
      EpicBook deployment started
    owner: root:root
    permissions: '0644'





















# #cloud-config
# package_update: true
# package_upgrade: true

# packages:
#   - git
#   - curl
#   - build-essential
#   - mysql-client

# runcmd:
#   # Install Node.js 18.x
#   - curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
#   - apt-get install -y nodejs
  
#   # Install PM2
#   - npm install -g pm2
  
#   # Install Nginx
#   - apt-get install -y nginx
#   - systemctl enable nginx
  
#   # Clone EpicBook repository
#   - cd /home/${admin_username}
#   - sudo -u ${admin_username} git clone ${github_repo_url} epicbook
#   - cd epicbook
  
#   # Install backend dependencies
#   - cd backend
#   - sudo -u ${admin_username} npm install
  
#   # Create backend .env file
#   - |
#     cat > .env << EOF
#     DB_HOST=${db_host}
#     DB_USER=${db_username}
#     DB_PASSWORD=${db_password}
#     DB_NAME=${db_name}
#     PORT=3001
#     NODE_ENV=production
#     EOF
  
#   # Start backend with PM2
#   - sudo -u ${admin_username} pm2 start server.js --name epicbook-backend
#   - sudo -u ${admin_username} pm2 save
#   - sudo -u ${admin_username} pm2 startup systemd -u ${admin_username} --hp /home/${admin_username}
  
#   # Build frontend
#   - cd ../frontend
#   - sudo -u ${admin_username} npm install
#   - sudo -u ${admin_username} npm run build
  
#   # Configure Nginx
#   - |
#     cat > /etc/nginx/sites-available/epicbook << 'NGINXCONF'
#     server {
#         listen 80;
#         server_name _;
        
#         # Serve frontend
#         root /home/${admin_username}/epicbook/frontend/build;
#         index index.html;
        
#         # Frontend routing
#         location / {
#             try_files $uri $uri/ /index.html;
#         }
        
#         # Backend API proxy
#         location /api/ {
#             proxy_pass http://localhost:3001/api/;
#             proxy_http_version 1.1;
#             proxy_set_header Upgrade $http_upgrade;
#             proxy_set_header Connection 'upgrade';
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
#             proxy_cache_bypass $http_upgrade;
#         }
#     }
#     NGINXCONF
  
#   # Enable site
#   - ln -s /etc/nginx/sites-available/epicbook /etc/nginx/sites-enabled/
#   - rm -f /etc/nginx/sites-enabled/default
#   - nginx -t
#   - systemctl restart nginx

# write_files:
#   - path: /etc/systemd/system/epicbook-backend.service
#     content: |
#       [Unit]
#       Description=EpicBook Backend Service
#       After=network.target
      
#       [Service]
#       Type=simple
#       User=${admin_username}
#       WorkingDirectory=/home/${admin_username}/epicbook/backend
#       ExecStart=/usr/bin/pm2 start server.js --name epicbook-backend --no-daemon
#       Restart=on-failure
      
#       [Install]
#       WantedBy=multi-user.target